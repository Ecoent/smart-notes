import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef void LocaleChangeCallback(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale _newLocale) {
    _shouldReload = true;
    I18n._locale = _newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate =
    const GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "${counter}"
  String mainViewCounter(String counter) => "${counter}";
  /// "Current counter value"
  String get mainViewCurrentCounterValue => "Current counter value";
  /// "Decrement Counter"
  String get mainViewDecrementCounter => "Decrement Counter";
  /// "Increment Counter"
  String get mainViewIncrementCounter => "Increment Counter";
  /// "Go to Second View"
  String get mainViewGoToSecondView => "Go to Second View";
  /// "Main View"
  String get mainViewTitle => "Main View";
  /// "Go back"
  String get secondViewGoBack => "Go back";
  /// "Show Alert Dialog"
  String get secondViewShowAlertDialog => "Show Alert Dialog";
  /// "Show Confirmation Dialog"
  String get secondViewShowConfirmationDialog => "Show Confirmation Dialog";
  /// "Something is loading..."
  String get secondViewSomethingIsLoading => "Something is loading...";
  /// "Second View"
  String get secondViewTitle => "Second View";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_de_CH extends I18n {
  const _I18n_de_CH();

  /// "${counter}"
  @override
  String mainViewCounter(String counter) => "${counter}";
  /// "Aktueller zählerwert"
  @override
  String get mainViewCurrentCounterValue => "Aktueller zählerwert";
  /// "Dekrementzähler"
  @override
  String get mainViewDecrementCounter => "Dekrementzähler";
  /// "Inkrementzähler"
  @override
  String get mainViewIncrementCounter => "Inkrementzähler";
  /// "Zur zweiten Ansicht wechseln"
  @override
  String get mainViewGoToSecondView => "Zur zweiten Ansicht wechseln";
  /// "Hauptansicht"
  @override
  String get mainViewTitle => "Hauptansicht";
  /// "Geh zurück"
  @override
  String get secondViewGoBack => "Geh zurück";
  /// "Benachrichtigungsdialog anzeigen"
  @override
  String get secondViewShowAlertDialog => "Benachrichtigungsdialog anzeigen";
  /// "Bestätigungsdialog anzeigen"
  @override
  String get secondViewShowConfirmationDialog => "Bestätigungsdialog anzeigen";
  /// "Etwas wird geladen"
  @override
  String get secondViewSomethingIsLoading => "Etwas wird geladen";
  /// "Zweite Ansicht"
  @override
  String get secondViewTitle => "Zweite Ansicht";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("en", "US"),
      const Locale("de", "CH")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (this.isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale _locale) {
    I18n._locale ??= _locale;
    I18n._shouldReload = false;
    final Locale locale = I18n._locale;
    final String lang = locale != null ? locale.toString() : "";
    final String languageCode = locale != null ? locale.languageCode : "";
    if ("en_US" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("de_CH" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_de_CH());
    }
    else if ("en" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("de" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_de_CH());
    }

    return new SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}