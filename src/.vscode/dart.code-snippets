// Workspace-specific code snippets
{
	"View Model Property": {
		"prefix": "vmprop",
		"body": [
			"$type _$prop;",
			"$type get $prop => _$prop;",
			"set $prop($type value) {",
			"\tif (_$prop == value) {",
			"\t\t_$prop = value;",
			"\t\treturn;",
			"\t}",
			"\t_$prop = value;",
			"\tnotifyListeners('${prop}');",
			"}",
		],
		"description": "Creates a view model property"
	},
	"Concrete/abstract class": {
		"prefix": "cac",
		"body": [
			"abstract class $className {}",
			"",
			"class ${className}Impl implements $className {}",
		],
		"description": "Creates an abstract class and a class to implement it"
	},
	"Check for null parameter using if": {
		"prefix": "cnullif",
		"body": [
			"if($param == null) throw ArgumentError.notNull('$param');",
		]
	},
	"Check for null parameter using ArugmentError.checkNotNull": {
		"prefix": "cnull",
		"body": [
			"ArgumentError.checkNotNull($param, '$param');",
		]
	},
	"Create a ModelBoundWidget and ModelBoundState": {
		"prefix": "mbw",
		"body": [
			"class $ViewName extends ModelBoundWidget<${ViewModelName}> {",
			"  ${ViewName}(${ViewModelName} viewModel) : super(viewModel);",
			"",
			"  @override",
			"  _${ViewName}State createState() => _${ViewName}State();",
			"}",
			"",
			"class _${ViewName}State extends ModelBoundState<${ViewName}, ${ViewModelName}> {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return ScopedModel<${ViewModelName}>(",
			"      model: viewModel,",
			"      child: ScopedModelDescendant<${ViewModelName}>(",
			"        builder: (context, child, viewModel) {",
			"          return Scaffold(",
			"            appBar: AppBar(",
			"              title: Text('${ViewName}'),",
			"            ),",
			"          );",
			"        },",
			"      ),",
			"    );",
			"  }",
			"}"
		]
	}
}